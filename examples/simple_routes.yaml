# Simplified Multi-Language Processing Routes
# Uses URL-style configuration with .env variable support

routes:
  # Camera detection pipeline with multiple languages
  - name: "smart_camera_detection"
    from: "rtsp://{{CAMERA_USER}}:{{CAMERA_PASS}}@{{CAMERA_IP}}/stream1"

    processors:
      # Step 1: Python YOLO detection
      - type: "external"
        command: "python scripts/detect_objects.py"
        input_format: "json"
        output_format: "json"
        config:
          confidence_threshold: 0.6
          model: "yolov8n.pt"
          target_objects: ["person", "car", "cat", "dog"]

      # Step 2: Go-based risk analysis and zone detection
      - type: "external"
        command: "go run scripts/image_processor.go"
        input_format: "json"
        output_format: "json"
        config:
          zone_mapping: "entrance:high,parking:medium,garden:low"
          threat_threshold: 0.7
          processor_name: "golang-risk-analyzer"

      # Step 3: Filter only high-risk detections
      - type: "filter"
        condition: "{{threat_level}} == 'high'"

      # Step 4: Transform to alert message
      - type: "transform"
        template: |
          ðŸš¨ SECURITY ALERT ðŸš¨
          Camera: {{source}}
          Threat Level: {{threat_level}}
          Detections: {{enhanced_detections|length}}
          Time: {{timestamp}}
          
          Details:
          {{#enhanced_detections}}
          - {{object_type}} in {{zone}} (risk: {{risk_score|round(2)}}) -> {{recommended_action}}
          {{/enhanced_detections}}

    # Multiple destinations using simple URLs
    to:
      - "email://{{SMTP_SERVER}}:{{SMTP_PORT}}?user={{SMTP_USER}}&password={{SMTP_PASS}}&to={{SECURITY_EMAIL}}"
      - "http://{{WEBHOOK_URL}}/security-alert"
      - "log://alerts/camera_{{CAMERA_NAME}}.log"

  # Simple health monitoring with Go
  - name: "system_health_check"
    from: "timer://5m"

    processors:
      - type: "external"
        command: "go run scripts/health_check.go"
        input_format: "json"
        output_format: "json"
        async: false
        config:
          check_endpoints: "{{HEALTH_ENDPOINTS}}"
          timeout: 10

      - type: "filter"
        condition: "{{status}} != 'healthy'"

      - type: "transform"
        template: "System health issue detected: {{service}} is {{status}}"

    to: "email://{{SMTP_SERVER}}:{{SMTP_PORT}}?user={{SMTP_USER}}&password={{SMTP_PASS}}&to={{ADMIN_EMAIL}}"

  # gRPC integration example
  - name: "grpc_ml_pipeline"
    from: "timer://1m"

    processors:
      # Rust-based data preprocessing
      - type: "external"
        command: "cargo run --bin data_preprocessor"
        input_format: "json"
        output_format: "json"
        config:
          batch_size: 32
          normalize: true

      # Python ML inference via gRPC
      - type: "external"
        command: "python scripts/grpc_ml_client.py"
        input_format: "json"
        output_format: "json"
        config:
          grpc_server: "{{ML_GRPC_SERVER}}"
          model_name: "{{ML_MODEL_NAME}}"

      # C++ post-processing
      - type: "external"
        command: "./bin/cpp_postprocessor"
        input_format: "json"
        output_format: "json"
        config:
          threshold: 0.85
          output_format: "optimized"

    to: "file://results/ml_output_{{timestamp}}.json"

  # MQTT sensor data processing
  - name: "iot_sensor_processing"
    from: "mqtt://{{MQTT_BROKER}}:1883/sensors/+"

    processors:
      # Aggregate sensor data
      - type: "aggregate"
        strategy: "collect"
        timeout: "30s"
        max_size: 10

      # Python analytics
      - type: "external"
        command: "python scripts/sensor_analytics.py"
        input_format: "json"
        output_format: "json"
        config:
          anomaly_threshold: 2.5
          window_size: 100

      # Node.js alerting logic
      - type: "external"
        command: "node scripts/alerting.js"
        input_format: "json"
        output_format: "json"
        config:
          alert_channels: "{{ALERT_CHANNELS}}"
          escalation_rules: "{{ESCALATION_RULES}}"

    to:
      - "http://{{DASHBOARD_URL}}/api/sensors"
      - "mqtt://{{MQTT_BROKER}}:1883/alerts/sensors"

# Environment variables that need to be set in .env file
env_vars:
  # Camera configuration
  - CAMERA_USER
  - CAMERA_PASS
  - CAMERA_IP
  - CAMERA_NAME

  # Email configuration
  - SMTP_SERVER
  - SMTP_PORT
  - SMTP_USER
  - SMTP_PASS
  - SECURITY_EMAIL
  - ADMIN_EMAIL

  # Service URLs
  - WEBHOOK_URL
  - HEALTH_ENDPOINTS
  - ML_GRPC_SERVER
  - ML_MODEL_NAME
  - DASHBOARD_URL

  # MQTT configuration
  - MQTT_BROKER
  - ALERT_CHANNELS
  - ESCALATION_RULES

# Global settings
settings:
  max_concurrent_routes: 10
  default_timeout: 30
  log_level: "info"
  metrics_enabled: true
  health_check_port: 8080